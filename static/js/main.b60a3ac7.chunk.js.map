{"version":3,"sources":["features/-images/user.svg","features/-images/users.svg","features/-images/dialog.svg","features/-images/logout.svg","features/-images/preloader.gif","features/Profile/profile.module.css","features/-images/my_ava.jpg","features/Profile/ProfileInfo/profileInfo.module.css","features/Users/users.module.css","serviceWorker.ts","store/reducers/dialogsReducer.tsx","api/api.tsx","store/reducers/profileReducer.tsx","features/-utils/helper.ts","store/reducers/usersReducer.tsx","store/reducers/authReducer.tsx","store/reducers/appReducer.tsx","store/store.tsx","features/Navbar/Navbar.tsx","features/-assets/Preloader.tsx","features/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","features/-assets/FollowToggle.tsx","features/Profile/ProfileInfo/ProfileInfo.tsx","features/Profile/Posts/newPosts/NewPost.tsx","features/-assets/FormControls/FormControl.tsx","features/Profile/Posts/Posts.tsx","features/Profile/Posts/Posts–°ontainer.tsx","features/Profile/ProfileInfo/ModalWindowInfo.tsx","features/Profile/Profile.tsx","features/-hocs/AuthRedirect.tsx","features/Profile/profile-selector.ts","features/Users/user-selector.ts","features/Profile/ProfileContainer.tsx","features/Header/header-selector.ts","features/Login/Login.tsx","features/Dialogs/DialogName.tsx","features/Dialogs/DialogsMessages.tsx","features/Dialogs/Dialogs.tsx","features/Dialogs/dialogs-selector.ts","features/Dialogs/DialogsContainer.tsx","features/-assets/FormControls/Pagination.tsx","features/Users/User.tsx","features/Users/Users.tsx","features/Users/UsersContainer.tsx","features/-assets/RoutesToContent.tsx","features/App/App.tsx","index.tsx","features/Dialogs/dialogs.module.css","features/Navbar/navbar.module.css","features/App/app.module.css","features/-assets/FormControls/formControl.module.css","features/Profile/Posts/Posts.module.css","features/-images/no_ava.png","features/Profile/Posts/newPosts/newPosts.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","newMessage","dialogsData","dialogsId","v1","name","messagesData","messageId","message","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","authAPI","id","delete","post","email","password","rememberMe","profileAPI","userId","status","put","info","photoProfile","formData","FormData","append","newPost","postData","idPost","profile","profileStatus","setUserProfile","type","setProfileStatus","setPhotoProfile","getProfile","dispatch","a","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","totalCount","isFetching","isFinished","follow","userID","unfollow","setIsFetching","isFetch","toggleFollowingProgress","toggleFollow","apiMethod","actionCreator","resultCode","getUnFollow","getFollow","login","isAuth","setAuthUserData","getAuth","initialized","reducers","combineReducers","dialogPage","state","action","newMessageText","profilePage","photos","filter","p","postId","usersPage","followed","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Navbar","authUserId","useSelector","currentUserId","auth","history","useHistory","useDispatch","className","classes","nav","activeClassName","activeHover","activeClick","to","src","user","alt","dialogs","users","style","justifySelf","onClick","push","paddingLeft","logoutsvg","Preloader","position","top","left","preloader","width","React","memo","props","useState","editMode","setEditMode","lsStatus","setLsStatus","useEffect","deActivatedEditMod","updateProfileStatus","statusBlock","statusBlock__changeStatus","input","onChange","e","currentTarget","value","autoFocus","placeholder","onKeyPress","event","key","statusBlock__status","onDoubleClick","disabled","some","imgAny","large","no_ava","currentUser","find","chekInfoContacts","val","contacts","href","user__photoBlock","user__photoBlock__photo","user__photoBlock__changePhoto","inputAddPhoto","savePhotoProfile","sendPhoto","target","files","goBack","user__nameBlock","user__nameBlock__name","fullName","user__info","lookingForAJob","aboutMe","lookingForAJobDescription","showModal","userPhoto","myava","marginLeft","deletePost","FormControl","meta","el","error","touched","styles","formControl","createElement","Textarea","Input","PostForm","reduxForm","onSubmit","handleSubmit","textareaBlock","Field","textarea","component","btnSend","postElement","postDataEl","index","posts","addPost","postText","postsBlock","PostsContainer","connect","createAddPostAction","Posts","ModalContainer","styled","div","ModalWindowBlock","InputBlock","ButtonBlock","ModalWindowInfo","getInit","profileInfo","getInitContacts","setName","github","setGithub","twitter","setTwitter","instagram","setInstagram","facebook","setFacebook","vk","setVk","setAboutMe","jobDescription","setJobDescription","openForJob","setOpenForJob","checked","updateProfileInfo","mainLink","website","youtube","setShowModal","profCont","mapStateToPropsRD","authUserHOC","Component","getProfileSelector","getProfileStatusSelector","getAuthIdSelector","getUsersPageSelector","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","getIsFinishedSelector","ProfileContainer","this","params","authId","getProfileStatus","refreshUser","prevProps","prevState","snapshot","Number","console","log","getState","withRouter","getAuthSelector","LogForm","loginBlock","authError","stopSubmit","_error","messages","AddMessageForm","getMessagesDataSelector","getDialogsDataSelector","getNewMessageSelector","DialogsContainer","addMessages","dialogsElement","d","messagesElement","m","Dialogs","dialogsNames","Messages","newMessageBody","inputPage","setInputPage","pageCount","Math","ceil","totalUsersCount","pages","i","errorInput","length","errorButton","pageS","pageSwitch","onPageChanged","changePage","totalPage","selectedPage","page","User","small","Users","usersBlock","UsersAPIClassComponent","setCurrentPage","getUsers","PureComponent","UsersContainer","path","us","render","App","initialize","appContainer","circle1","circle2","appBlock","navbar","content","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b60a3ac7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.7de5e5f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/users.08be9bce.svg\";","module.exports = __webpack_public_path__ + \"static/media/dialog.27d2bb2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.4a8937d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/preloader.35d5736d.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profCont\":\"profile_profCont__3DNeE\"};","module.exports = __webpack_public_path__ + \"static/media/my_ava.b07ea12e.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"profileInfo_user__2oG7Q\",\"user__nameBlock\":\"profileInfo_user__nameBlock__3wmp0\",\"user__nameBlock__name\":\"profileInfo_user__nameBlock__name__2JjoH\",\"user__photoBlock\":\"profileInfo_user__photoBlock__2qTYd\",\"user__photoBlock__photo\":\"profileInfo_user__photoBlock__photo__9TVAa\",\"user__photoBlock__changePhoto\":\"profileInfo_user__photoBlock__changePhoto__K1L48\",\"inputAddPhoto\":\"profileInfo_inputAddPhoto__3aVJs\",\"user__info\":\"profileInfo_user__info__6D54m\",\"input\":\"profileInfo_input__3Fe4G\",\"statusBlock\":\"profileInfo_statusBlock__2R-qi\",\"statusBlock__changeStatus\":\"profileInfo_statusBlock__changeStatus__SKstG\",\"statusBlock__status\":\"profileInfo_statusBlock__status__1g2Z6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageS\":\"users_pageS__2Rs22\",\"page\":\"users_page__h1cAq\",\"pageSwitch\":\"users_pageSwitch__3oIdd\",\"changePage\":\"users_changePage__3M_kF\",\"usersPage\":\"users_usersPage__2GpcK\",\"totalPage\":\"users_totalPage__37Rmw\",\"usersBlock\":\"users_usersBlock__YZTb0\",\"user\":\"users_user__qh56n\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the App load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve -assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web App is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different App. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {DialogsPageType, DispatchActionType, MessagesDataElType} from \"../stateType\";\r\n\r\nlet initialState: DialogsPageType = {\r\n    newMessage: \"\",\r\n\r\n    dialogsData: [\r\n        {dialogsId: v1(), name: \"Miroliub\"},\r\n        {dialogsId: v1(), name: \"Ratibor\"},\r\n        {dialogsId: v1(), name: \"Inokentii`\"},\r\n        {dialogsId: v1(), name: \"Iziaslav\"},\r\n        {dialogsId: v1(), name: \"Iziaslav\"},\r\n    ],\r\n\r\n    messagesData: [\r\n        {messageId: v1(), message: \"Hi\"},\r\n        {messageId: v1(), message: \"My parents gave me a very difficult name\"},\r\n        {messageId: v1(), message: \"True?)\"},\r\n\r\n    ],\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: DispatchActionType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case \"ADD-MESSAGE\" :\r\n            let newMessage: MessagesDataElType = {\r\n                messageId: v1(),\r\n                message: action.newMessageText,\r\n            };\r\n\r\n            // let copyState={...state};\r\n            // copyState.messagesData=[...state.messagesData]\r\n            // copyState.messagesData.push(newMessage);\r\n            // copyState.newMessage = \"\";\r\n            // return copyState ;\r\n\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, newMessage],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const createAddMessageAction = (newMessageText: string) => ({ type: \"ADD-MESSAGE\", newMessageText} as const);\r\n","import axios from \"axios\";\r\nimport {AuthType, ProfileType, UserPageType} from \"../store/stateType\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"7356db4d-2dd5-4272-8da5-db03322fb687\"}\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n\r\n    getUsers(currentPage: number, pageSize: number) {\r\n\r\n        return instance.get<UserPageType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n\r\n    unFollow(id: number) {\r\n        return instance.delete<AuthType>(`follow/${id}`).then(response => response.data)\r\n    },\r\n\r\n    follow(id: number) {\r\n        return instance.post<AuthType>(`follow/${id}`).then(response => response.data)\r\n    },\r\n\r\n    auth() {\r\n        return instance.get<AuthType>(`auth/me`).then(response => response.data)\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<AuthType>(`auth/login`, {email, password, rememberMe}).then(response => response.data)\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete<AuthType>(`auth/login`).then(response => response.data)\r\n    },\r\n\r\n\r\n}\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data)\r\n    },\r\n    getProfileStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId).then(response => response.data)\r\n    },\r\n    updateProfileStatus(status: Object) {\r\n        return instance.put(`profile/status`, status).then(response => response.data)\r\n    },\r\n    updateProfileInfo(info: ProfileType) {\r\n        return instance.put<ProfileType>(`profile`, info).then(response => response.data)\r\n    },\r\n    putPhotoProfile(photoProfile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoProfile)\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response)\r\n    },\r\n}\r\n","import {DispatchActionType, PostDataElType, ProfilePageType, ProfileType,} from \"../stateType\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../../api/api\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    newPost: \"\",\r\n    postData: [\r\n        {idPost: \"1\", post: \"It`s my first post\"},\r\n        {idPost: \"2\", post: \"I don`t have coronavirus\"},\r\n        {idPost: \"3\", post: \"React it is a powerüöÄ\"},\r\n\r\n    ],\r\n    profile: null,\r\n    profileStatus: \"\",\r\n\r\n\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: DispatchActionType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-POST\" : {\r\n            let newPost: PostDataElType = {\r\n                idPost: v1(),\r\n                post: action.post,\r\n            };\r\n            return {\r\n                ...state,\r\n                postData: [newPost, ...state.postData],\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        case \"SET_USER_PROFILE\" :\r\n\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n\r\n        case \"SET_PROFILE_STATUS\" :\r\n\r\n            return {\r\n                ...state,\r\n                profileStatus: action.profileStatus\r\n            }\r\n\r\n        case \"SET_PHOTO_PROFILE\" :\r\n\r\n            return {\r\n                ...state, profile: state.profile ? {...state.profile , photos: action.photoProfile} : null\r\n            }\r\n\r\n        case \"DELETE_POST\" :\r\n\r\n            return {\r\n                ...state, postData: state.postData.filter(p => p.idPost !== action.postId)\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport const createAddPostAction = (post: string) => ({type: \"ADD-POST\", post} as const);\r\n\r\nexport const setUserProfile = (profile: ProfileType | null) => ({type: \"SET_USER_PROFILE\", profile} as const);\r\n\r\nexport const setProfileStatus = (profileStatus: string) => ({type: \"SET_PROFILE_STATUS\", profileStatus} as const);\r\n\r\n// export const updateProfileInfo = (info: ProfileType) => ({type: \"SET_PROFILE_INFO\", info} as const);\r\n\r\nexport const setPhotoProfile = (photoProfile: any) => ({type: \"SET_PHOTO_PROFILE\", photoProfile} as const);\r\n\r\nexport const deletePostAC = (postId: string) => ({type: \"DELETE_POST\", postId} as const)\r\n\r\n\r\nexport const getProfile = (userId: string) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionType>) => {\r\n        let data = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(data));\r\n    }\r\n}\r\n\r\nexport const getProfileStatus = (userId: string) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionType>) => {\r\n        let data = await profileAPI.getProfileStatus(userId)\r\n        dispatch(setProfileStatus(data));\r\n    }\r\n}\r\n\r\nexport const updateProfileStatusTC = (status: Object) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionType>) => {\r\n        let data = await profileAPI.updateProfileStatus(status)\r\n        if (data.data.resultCode === 0) {\r\n            dispatch(setProfileStatus(data));\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateProfileInfoTC = (info: ProfileType) => {\r\n\r\n    return async (dispatch: Dispatch<any>, getState: Function) => {\r\n\r\n        let userId = getState().data.id\r\n        let data = await profileAPI.updateProfileInfo(info)\r\n        console.log(data)\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(userId));\r\n        }\r\n    }\r\n}\r\nexport const savePhotoProfile = (photoProfile: File) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionType>) => {\r\n        let data = await profileAPI.putPhotoProfile(photoProfile)\r\n        if (data.data.resultCode === 0) {\r\n            console.log(data.data.data)\r\n            dispatch(setPhotoProfile(data.data.data.photos));\r\n        }\r\n    }\r\n}","export const updateObjectInArray = (items: any, itemId: number, objPropName: string, newObjProps : any  ) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {UserElType, UserPageType} from \"../stateType\"\r\nimport {authAPI, usersAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../../features/-utils/helper\";\r\n\r\n\r\nlet initialState = {\r\n    items: [],\r\n    pageSize: 8,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFinished: [],\r\n\r\n\r\n}\r\n\r\n\r\nexport type DispatchActionTypeUsers =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n    | ReturnType<typeof setUsers>;\r\n\r\n\r\n\r\nexport const usersReducer = (state: UserPageType = initialState, action: DispatchActionTypeUsers): UserPageType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n\r\n            return {\r\n                ...state,\r\n                items: updateObjectInArray(state.items, action.userID, \"id\", {followed:true})\r\n\r\n            }\r\n        case \"UNFOLLOW\":\r\n\r\n            return {\r\n                ...state,\r\n                items: updateObjectInArray(state.items, action.userID, \"id\", {followed:false})\r\n\r\n            }\r\n        case \"SET_USERS\":\r\n\r\n            return {...state, items: action.items}\r\n\r\n\r\n        case \"SET_CURRENT_PAGE\":\r\n\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n\r\n        case \"SET_USERS_COUNT\":\r\n\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case \"SET_IS_FETCH\":\r\n\r\n            return {\r\n                ...state, isFetching: action.isFetch\r\n            }\r\n        case \"SET_FOLLOWING_PROGRESS\":\r\n\r\n            return {\r\n                ...state, isFinished: action.isFetch ?\r\n                    [...state.isFinished, action.userId] :\r\n                    state.isFinished.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const follow = (userID: number) => ({type: \"FOLLOW\", userID } as const);\r\n\r\nexport const unfollow = (userID: number) => ({type: \"UNFOLLOW\", userID} as const);\r\n\r\nexport const setUsers = (items: UserElType[]) => ({type: \"SET_USERS\", items} as const);\r\n\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const);\r\n\r\nexport const setTotalCount = (totalCount: number) => ({type: \"SET_USERS_COUNT\", totalCount} as const);\r\n\r\nexport const setIsFetching = (isFetch: boolean) => ({type: \"SET_IS_FETCH\", isFetch} as const);\r\n\r\nexport const toggleFollowingProgress = (isFetch: boolean, userId: number) => ({type: \"SET_FOLLOWING_PROGRESS\", isFetch, userId} as const);\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionTypeUsers>) => {\r\n        dispatch(setIsFetching(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst toggleFollow = async (dispatch: Dispatch<DispatchActionTypeUsers>, userId: number, apiMethod: any, actionCreator: Function  ) => {\r\n\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n\r\n    let data = await apiMethod\r\n\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n}\r\n\r\nexport const getUnFollow = (userId: number) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionTypeUsers>) => {\r\n        toggleFollow(dispatch, userId, authAPI.unFollow(userId), unfollow )\r\n    }\r\n}\r\n\r\nexport const getFollow = (userId: number) => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionTypeUsers>) => {\r\n        toggleFollow(dispatch, userId, authAPI.follow(userId), follow )\r\n    }\r\n}\r\n","import {AuthDataType} from \"../stateType\"\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false\r\n}\r\n\r\n\r\nexport type DispatchActionTypeAuth =\r\n\r\n    | ReturnType<typeof setAuthUserData>;\r\n\r\n\r\nexport const authReducer = (state: AuthDataType = initialState, action: DispatchActionTypeAuth): AuthDataType => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_USER_DATA\":\r\n\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: string | null, login: string | null, email: string | null, isAuth: boolean) =>\r\n    ({type: \"SET_USER_DATA\", data: {id, login, email, isAuth}} as const);\r\n\r\n\r\nexport const getAuth = () => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionTypeAuth>) => {\r\n        let data = await authAPI.auth()\r\n        if (data.resultCode === 0) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(setAuthUserData(id, login, email, true))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => {\r\n\r\n    return async (dispatch: Dispatch<any>) => {\r\n        let data = await authAPI.login(email, password, rememberMe)\r\n        if (data.resultCode === 0) {\r\n            dispatch(getAuth())\r\n        } else {\r\n            dispatch(stopSubmit(\"login\", {_error: data.messages}))\r\n        }\r\n\r\n    }\r\n}\r\nexport const logout = () => {\r\n\r\n    return async (dispatch: Dispatch<DispatchActionTypeAuth>) => {\r\n        let data = await authAPI.logout()\r\n        if (data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {getAuth} from \"./authReducer\";\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport type DispatchActionTypeApp =\r\n\r\n    | ReturnType<typeof setInitialized>\r\n\r\n    ;\r\n\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: DispatchActionTypeApp): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"INITIALIZED_SUCCEED\":\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setInitialized = () => ({type: \"INITIALIZED_SUCCEED\"} as const);\r\n\r\n\r\nexport const initialize = () => {\r\n\r\n    return async (dispatch: Dispatch<any>) => {\r\n        await dispatch(getAuth())\r\n        await dispatch(setInitialized())\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\r\nimport {dialogsReducer} from \"./reducers/dialogsReducer\";\r\nimport {profileReducer} from \"./reducers/profileReducer\";\r\nimport {usersReducer} from \"./reducers/usersReducer\";\r\nimport {authReducer} from \"./reducers/authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer} from \"./reducers/appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    dialogPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    usersPage: usersReducer,\r\n    data: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\n // @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store: Store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ));\r\n\r\n // let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\nimport classes from \"./navbar.module.css\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../store/stateType\";\r\nimport user from \"../-images/user.svg\"\r\nimport users from \"../-images/users.svg\"\r\nimport dialogs from \"../-images/dialog.svg\"\r\nimport logoutsvg from \"../-images/logout.svg\"\r\nimport {logout} from \"../../store/reducers/authReducer\";\r\n\r\n\r\n\r\nexport function Navbar() {\r\n\r\n    let authUserId = useSelector<StateType, string | null>(state => state.data.id)\r\n    let currentUserId = useSelector<StateType>(state => state.profilePage.profile?.userId)\r\n    let auth = useSelector<StateType>(state => state.data.isAuth)\r\n    let history = useHistory()\r\n    let dispatch = useDispatch()\r\n\r\n    return (\r\n\r\n        <div className={classes.nav}>\r\n\r\n            <div><NavLink activeClassName={authUserId === currentUserId ? classes.activeHover : \"\"}\r\n                          className={classes.activeClick}\r\n                          to={\"/ReactGotlibbbWay/profile\"}><img src={user} alt=\"user\"/>My profile</NavLink></div>\r\n\r\n            <div><NavLink activeClassName={classes.activeHover} className={classes.activeClick}\r\n                          to={\"/ReactGotlibbbWay/dialogs\"}><img src={dialogs} alt=\"user\"/>Dialogs</NavLink></div>\r\n\r\n            <div><NavLink activeClassName={classes.activeHover} className={classes.activeClick}\r\n                          to={\"/ReactGotlibbbWay/users\"}><img src={users} alt=\"user\"/>Users</NavLink></div>\r\n\r\n             {auth && <a\r\n                        style={{justifySelf: \"end\"}}\r\n                        onClick={() => {\r\n                        dispatch(logout())\r\n                        history.push('/ReactGotlibbbWay/login')\r\n                    }}><img style={{paddingLeft: \"5px\"}} src={logoutsvg} alt=\"logout\"/>Log out\r\n                    </a>}\r\n\r\n            {/*<div><NavLink activeClassName={classes.activeHover} className={classes.activeClick}*/}\r\n            {/*              to={\"/news\"}>News</NavLink></div>*/}\r\n\r\n            {/*<div><NavLink activeClassName={  classes.activeHover} className={classes.activeClick}*/}\r\n            {/*              to={\"/music\"}>Music</NavLink></div>*/}\r\n\r\n            {/*<div><NavLink activeClassName={classes.activeHover} className={classes.activeClick}*/}\r\n            {/*              to={\"/settings\"}>Settings</NavLink></div>*/}\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport preloader from \"../-images/preloader.gif\";\r\n\r\n\r\nexport const Preloader =()=>{\r\n    return(\r\n        <div style={{ position: \"absolute\", top: \"40%\", left: \"35%\"}}><img src={preloader} alt=\"preloader\" style={{width: \"500px\"}}/></div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from \"./profileInfo.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setProfileStatus} from \"../../../store/reducers/profileReducer\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    profileStatus: string | null\r\n    updateProfileStatus: (status: Object | null) => void\r\n    currentUserId: number\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [lsStatus, setLsStatus] = useState<string | null>(\"\")\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n            setLsStatus(props.profileStatus)\r\n        }, [props.profileStatus]\r\n\r\n    )\r\n\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLsStatus(e.currentTarget.value)\r\n\r\n    }\r\n    const deActivatedEditMod = () => {\r\n        dispatch(setProfileStatus(lsStatus|| \"\"))\r\n        props.updateProfileStatus({status: lsStatus})\r\n        setEditMode(false)\r\n    }\r\n\r\n    const reActivatedMod = () => {\r\n        setLsStatus(props.profileStatus)\r\n        setEditMode(false);\r\n\r\n    }\r\n\r\n\r\n    return <div className={classes.statusBlock}>\r\n\r\n        {editMode && !props.currentUserId\r\n            ?\r\n\r\n\r\n            <div className={classes.statusBlock__changeStatus}>\r\n\r\n                <input\r\n                    className={classes.input}\r\n                    onChange={changeStatus}\r\n                    autoFocus={true}\r\n                    placeholder={\"Fix it\"}\r\n                    onKeyPress={(event) => {\r\n                        if (event.key === \"Enter\") deActivatedEditMod()\r\n                    }}\r\n                    value={lsStatus === null || lsStatus === \"\" ? \"\" : lsStatus}\r\n                />\r\n                <button onClick={deActivatedEditMod}>‚Ü≤</button>\r\n                <button onClick={reActivatedMod}>–•</button>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className={classes.statusBlock__status} onDoubleClick={() => setEditMode(true)}> <span>\r\n                 {lsStatus === null || lsStatus === \"\" ?\r\n                     <div><span> User has`t status.</span></div> : lsStatus}</span>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default React.memo(ProfileStatusWithHooks)\r\n","import {UserElType} from \"../../store/stateType\";\r\nimport React from \"react\";\r\n\r\ntype FollowTogglePropsType = {\r\n    user: UserElType | undefined\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n}\r\n\r\nconst FollowToggle = (props: FollowTogglePropsType) => {\r\n    let userId = props.user &&  props.user.id || 0\r\n\r\n    return <div>\r\n        {props.user && props.user.followed ?\r\n            <button disabled={props.isFinished.some(id => id === userId)} onClick={() => {\r\n                props.getUnFollow(userId)\r\n            }}>Unfollow</button> :\r\n            <button disabled={props.isFinished.some(id => id === userId)} onClick={() => {\r\n                props.getFollow(userId)\r\n            }}>Follow</button>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default React.memo(FollowToggle)","import no_ava from '../../-images/no_ava.png'\r\nimport React from \"react\";\r\nimport classes from \"./profileInfo.module.css\"\r\nimport {Preloader} from \"../../-assets/Preloader\";\r\nimport {ProfileType, UserElType} from \"../../../store/stateType\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport FollowToggle from \"../../-assets/FollowToggle\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    profileStatus: string | null\r\n    currentUserId: number\r\n    updateProfileStatus: (status: Object | null) => void\r\n    updateProfileInfo: (info: ProfileType) => void\r\n    savePhotoProfile: (photo: File) => void\r\n    showModal?: (show: boolean) => void\r\n\r\n    usersPage: UserElType[]\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n\r\n    const history = useHistory()\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    let imgAny = props.profile.photos && (props.profile.photos.large || no_ava);\r\n\r\n    const sendPhoto = (e: File) => {\r\n        props.savePhotoProfile(e)\r\n    }\r\n\r\n    const currentUser = props.usersPage.find(user => user.id === props.currentUserId);\r\n\r\n    const chekInfoContacts = (val: string) => {\r\n        if (props.profile && props.profile.contacts ) {\r\n            return <a href={props.profile.contacts[val]}>{props.profile.contacts[val]}</a>\r\n        } else  {\r\n            return \"information not found...\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n\r\n        <div className={classes.user}>\r\n            <div className={classes.user__photoBlock}>\r\n                <img className={classes.user__photoBlock__photo} src={imgAny} alt={\"imgAny\"}/>\r\n                {!props.currentUserId && <label className={classes.user__photoBlock__changePhoto}>\r\n                    ‚ûï<input type=\"file\" className={classes.inputAddPhoto}\r\n                            onChange={(e: any) => sendPhoto(e.target.files[0])}/></label>\r\n                ||\r\n                <>\r\n                    <FollowToggle getUnFollow={props.getUnFollow} getFollow={props.getFollow} user={currentUser}\r\n                                  isFinished={props.isFinished}/>\r\n                    <button onClick={history.goBack}>‚Ü¢ go back</button>\r\n                </>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div className={classes.user__nameBlock}>\r\n                    <span className={classes.user__nameBlock__name}>{props.profile.fullName}</span>\r\n                    <ProfileStatusWithHooks profileStatus={props.profileStatus}\r\n                                            currentUserId={props.currentUserId}\r\n                                            updateProfileStatus={props.updateProfileStatus}/>\r\n                </div>\r\n\r\n\r\n                <div className={classes.user__info}>\r\n                    <div><b>Open for interviews: </b>{props.profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n                    <div><b>Github : </b>{chekInfoContacts(\"github\")}</div>\r\n                    <div><b>Twitter : </b>{chekInfoContacts(\"twitter\")}</div>\r\n                    <div><b>Instagram : </b>{chekInfoContacts(\"instagram\")}</div>\r\n                    <div><b>Facebook : </b>{chekInfoContacts(\"facebook\")}</div>\r\n                    <div><b>Vk : </b>{chekInfoContacts(\"vk\")}</div>\r\n                    <div><b>About me : </b>{props.profile.aboutMe || \"information not found...\"}</div>\r\n                    <div><b>Job description\r\n                        : </b>{props.profile.lookingForAJobDescription || \"information not found...\"}</div>\r\n\r\n                </div>\r\n                {!props.currentUserId &&\r\n                <button onClick={() => props.showModal && props.showModal(true)}>Change info</button>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default React.memo(ProfileInfo)","import classes from \"./newPosts.module.css\";\r\nimport React from \"react\";\r\nimport myava from \"../../../-images/my_ava.jpg\";\r\n\r\ntype PostPropsType = {\r\n    post: string\r\n    idPost: string\r\n    deletePost: (id: string) => void\r\n}\r\n\r\nfunction NewPost(props: PostPropsType) {\r\n\r\n    return <div>\r\n        <div className={classes.newPost}>\r\n\r\n            <img className={classes.userPhoto} src={myava} alt=\"\"/>\r\n\r\n            <span className={classes.post}>{props.post}</span>\r\n\r\n            <button style={{marginLeft: \"10px\"}} onClick={()=>props.deletePost(props.idPost)}>x</button>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default React.memo(NewPost)","import React from \"react\";\r\nimport  styles from \"./formControl.module.css\"\r\n\r\n//\r\n// // @ts-ignore\r\n// export const FormControl = ({input, meta,child, ...props }) => {\r\n//     const error= meta.touched &&meta.error;\r\n//\r\n//     return <div className={styles.formControl + \" \" + (error ? styles.error: \" \")}>\r\n//         <div>\r\n//             {props.children}\r\n//         </div>\r\n//         {error && <span>{meta.error}</span>}\r\n//     </div>\r\n// }\r\n// // @ts-ignore\r\n// export const Textarea = (props) => {\r\n// const {input, meta,children, ...restProps }  = props;\r\n//     return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n// }\r\n//\r\n// // @ts-ignore\r\n// export const Input = (props) => {\r\n//\r\n//     const {input, meta,children, ...restProps }  = props;\r\n//     return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n// }\r\n// @ts-ignore\r\nexport const FormControl = ({input, meta,el, ...props }) => {\r\n    const error= meta.touched &&meta.error;\r\n\r\n    return <div className={styles.formControl + \" \" + (error ? styles.error: \" \")}>\r\n        <div>\r\n            {React.createElement(el, {...input, ...props} )}\r\n        </div>\r\n        {error && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n// @ts-ignore\r\nexport const Textarea = (props) => {\r\n    return <FormControl {...props} el={\"textarea\"}/>\r\n}\r\n\r\n// @ts-ignore\r\nexport const Input = (props) => {\r\n    return <FormControl {...props} el={\"input\"}/>\r\n}\r\n\r\n","import React from \"react\";\r\nimport NewPost from \"./newPosts/NewPost\";\r\nimport {PostDataElType} from \"../../../store/stateType\";\r\nimport classes from \"./Posts.module.css\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../-assets/FormControls/FormControl\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {deletePostAC} from \"../../../store/reducers/profileReducer\";\r\n\r\n\r\ntype PostTypeProps = {\r\n    postDataEl: Array<PostDataElType>\r\n    newPost: string\r\n    addPost: (value: any) => void\r\n}\r\n\r\n\r\nfunction Posts(props: PostTypeProps) {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n\r\n    const deletePost = (id: string) => {\r\n        dispatch(deletePostAC(id))\r\n    }\r\n\r\n    let postElement = props.postDataEl.map((p, index) =>\r\n        <NewPost idPost={p.idPost} post={p.post} key={index} deletePost={deletePost}/>\r\n    );\r\n\r\n    const addPost = (value: any) => {\r\n        props.addPost(value.postText)\r\n        value.postText =\"\"\r\n    }\r\n\r\n    return <div className={classes.posts}>\r\n        <PostForm onSubmit={addPost}/>\r\n        <div className={classes.postsBlock}>\r\n            {postElement}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst PostForm = reduxForm({form: \"addPost\"})((props: InjectedFormProps) => {\r\n    const onKeyPress = (key: string, event: any) => {\r\n        return key === 'Enter' && event()\r\n    }\r\n\r\n    return <form onSubmit={props.handleSubmit} onKeyPress={(e) => onKeyPress(e.key, props.handleSubmit)}>\r\n        <div className={classes.textareaBlock}>\r\n            <Field className={classes.textarea} component={Textarea} placeholder={\"Write a post...\"} name={\"postText\"}\r\n                   />\r\n                <button className={classes.btnSend}>Add post</button>\r\n        </div>\r\n    </form>\r\n})\r\n\r\nexport default React.memo(Posts)","import {createAddPostAction} from \"../../../store/reducers/profileReducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {DispatchActionType, StateType} from \"../../../store/stateType\";\r\nimport React from \"react\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nfunction mapStateProps(state: StateType) {\r\n    return {\r\n        postDataEl: state.profilePage.postData,\r\n        newPost: state.profilePage.newPost\r\n    }\r\n\r\n}\r\n\r\nfunction mapDispatchProps(dispatch: (action: DispatchActionType) => void) {\r\n\r\n    return {\r\n\r\n\r\n        addPost: (post: string) => {\r\n\r\n            dispatch(createAddPostAction(post))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const PostsContainer = compose<Function>(connect(mapStateProps, mapDispatchProps),React.memo)(Posts);\r\n","import styled from \"styled-components\";\r\nimport React, {useState} from \"react\";\r\nimport {ProfileType} from \"../../../store/stateType\";\r\n\r\nlet ModalContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  border-radius: 2rem;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n\r\n`;\r\nlet ModalWindowBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-top: 15px;\r\n  min-height: 500px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  width: 608px;\r\n  background: linear-gradient(to right bottom, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.5));\r\n  backdrop-filter: blur(2rem);\r\n  animation: show-modal 0.3s forwards;\r\n\r\n  @keyframes show-modal {\r\n    0% {\r\n      opacity: 0;\r\n      transform: translateY(-50px);\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nlet InputBlock = styled.div`\r\n  font-size: 1.5rem;\r\n  display: flex;\r\n  width: 80%;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  margin-top: 15px;\r\n\r\n  label {\r\n    display: flex;\r\n    align-content: center;\r\n  }\r\n\r\n  input {\r\n    width: 300px;\r\n    padding: 3px 10px;\r\n    font-size: 1.5rem;\r\n    border-radius: 1rem;\r\n    outline: none;\r\n  }\r\n\r\n  input[type=\"checkbox\"] {\r\n    width: 25px;\r\n    height: 25px;\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  textarea {\r\n    padding: 3px 10px;\r\n    border-width: 2px;\r\n    font-size: 1.5rem;\r\n    border-radius: 1rem;\r\n    outline: none;\r\n    height: 150px;\r\n    width: 300px;\r\n  }\r\n\r\n  span {\r\n    margin-left: 15px;\r\n  }\r\n`;\r\n\r\nlet ButtonBlock = styled.div`\r\n  width: 80%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 30px 0;\r\n\r\n  button {\r\n    font-size: 25px;\r\n  }\r\n\r\n`\r\n\r\n\r\ntype ModalWindowInfoPropsType = {\r\n    showModal: (show: boolean) => void\r\n    profileInfo: ProfileType | null\r\n    updateProfileInfo: (info: ProfileType | null) => void\r\n\r\n\r\n}\r\n\r\n\r\nexport function ModalWindowInfo(props: ModalWindowInfoPropsType) {\r\n\r\n    const getInit = (val: string): string => props.profileInfo ? props.profileInfo[val] : \"\";\r\n    const getInitOpenForJob = (val: string): boolean => props.profileInfo ? props.profileInfo[val] : false;\r\n    const getInitContacts = (val: string): string => (props.profileInfo && props.profileInfo.contacts) ? props.profileInfo.contacts[val] : \"\";\r\n\r\n\r\n    let [name, setName] = useState(getInit(\"fullName\") || \"\")\r\n    let [github, setGithub] = useState(getInitContacts(\"github\") || \"\")\r\n    let [twitter, setTwitter] = useState(getInitContacts(\"twitter\") || \"\")\r\n    let [instagram, setInstagram] = useState(getInitContacts(\"instagram\") || \"\")\r\n    let [facebook, setFacebook] = useState(getInitContacts(\"facebook\") || \"\")\r\n    let [vk, setVk] = useState(getInitContacts(\"vk\") || \"\")\r\n    let [aboutMe, setAboutMe] = useState(getInit(\"aboutMe\") || \"\")\r\n    let [jobDescription, setJobDescription] = useState(getInit(\"lookingForAJobDescription\") || \"\")\r\n    let [openForJob, setOpenForJob] = useState<boolean>(getInitOpenForJob(\"lookingForAJob\"))\r\n\r\n    const ApplyChangesHandler = () => {\r\n        props.updateProfileInfo({\r\n            \"contacts\": {\r\n                mainLink: null,\r\n                website: null,\r\n                youtube: null,\r\n                vk,\r\n                github,\r\n                facebook,\r\n                instagram,\r\n                twitter,\r\n            },\r\n            fullName : name,\r\n            aboutMe,\r\n            lookingForAJob: openForJob,\r\n            lookingForAJobDescription: jobDescription,\r\n        })\r\n        props.showModal(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <ModalContainer>\r\n            <ModalWindowBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"name\"} value={name}\r\n                                   onChange={(e) => setName(e.currentTarget.value)}/> <span>- Name</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"github\"} value={github}\r\n                                   onChange={(e) => setGithub(e.currentTarget.value)}/> <span>- Github</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"twitter\"} value={twitter}\r\n                                   onChange={(e) => setTwitter(e.currentTarget.value)}/> <span>- Twitter</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"instagram\"} value={instagram}\r\n                                   onChange={(e) => setInstagram(e.currentTarget.value)}/>\r\n                        <span>- Instagram</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"facebook\"} value={facebook}\r\n                                   onChange={(e) => setFacebook(e.currentTarget.value)}/>\r\n                        <span>- Facebook</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"vk\"} value={vk}\r\n                                   onChange={(e) => setVk(e.currentTarget.value)}/> <span>- VK</span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <textarea placeholder={\"about me\"} value={aboutMe}\r\n                                      onChange={(e) => setAboutMe(e.currentTarget.value)}/>\r\n                        <span>- About me </span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"text\" placeholder={\"job description\"} value={jobDescription}\r\n                                      onChange={(e) => setJobDescription(e.currentTarget.value)}/>\r\n                        <span>- Description </span></label>\r\n                </InputBlock>\r\n                <InputBlock>\r\n                    <label> <input type=\"checkbox\" checked={openForJob}\r\n                                   onChange={(e) => setOpenForJob(e.currentTarget.checked)}/> <span>- Open for interviews</span></label>\r\n                </InputBlock>\r\n                <ButtonBlock>\r\n                    <button onClick={() => props.showModal(false)}>Cancel</button>\r\n                    <button onClick={ApplyChangesHandler}>Apply changes</button>\r\n                </ButtonBlock>\r\n            </ModalWindowBlock>\r\n        </ModalContainer>\r\n    );\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport classes from \"./profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {PostsContainer} from \"./Posts/Posts–°ontainer\";\r\nimport {ProfileType, UserElType} from \"../../store/stateType\";\r\nimport { ModalWindowInfo } from \"./ProfileInfo/ModalWindowInfo\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    profileStatus: string | null\r\n    updateProfileStatus: (status: Object | null) => void\r\n    updateProfileInfo: (info: ProfileType | null) => void\r\n    savePhotoProfile: (photo: File) => void\r\n    currentUserId: number\r\n\r\n    usersPage: UserElType[]\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    let [showModal, setShowModal] = useState(false)\r\n\r\n\r\n\r\n\r\n    return <div className={classes.profCont}>\r\n\r\n            <ProfileInfo {...props} showModal={setShowModal}/>\r\n            {props.profile && !props.currentUserId &&<PostsContainer/>}\r\n            {!props.currentUserId && showModal && <ModalWindowInfo updateProfileInfo={props.updateProfileInfo} profileInfo={props.profile} showModal={setShowModal}/>}\r\n\r\n        </div>\r\n\r\n}\r\n\r\nexport default React.memo(Profile)\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../store/stateType\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsRD = (state: StateType) => ({\r\n    isAuth: state.data.isAuth\r\n})\r\n\r\nexport const authUserHOC = (Component: Function) => {\r\n\r\n    return connect(mapStateToPropsRD)((props: { isAuth: boolean }) => {\r\n        if (!props.isAuth) return <Redirect to={\"/ReactGotlibbbWay/login\"}/>\r\n        return <Component {...props} />\r\n\r\n    })\r\n\r\n}\r\n","import {StateType} from \"../../store/stateType\";\r\n\r\nexport const getProfileSelector = (state: StateType) => state.profilePage.profile;\r\n\r\nexport const getProfileStatusSelector = (state: StateType) => state.profilePage.profileStatus;\r\n\r\nexport const getAuthIdSelector = (state: StateType) => state.data.id;\r\n","import {StateType} from \"../../store/stateType\";\r\n\r\nexport const getUsersPageSelector = (state: StateType) => state.usersPage.items;\r\n\r\nexport const getPageSizeSelector = (state: StateType) => state.usersPage.pageSize;\r\n\r\nexport const getTotalUsersCountSelector = (state: StateType) => state.usersPage.totalCount;\r\n\r\nexport const getCurrentPageSelector = (state: StateType) => state.usersPage.currentPage;\r\n\r\nexport const getIsFetchingSelector = (state: StateType) => state.usersPage.isFetching;\r\n\r\nexport const getIsFinishedSelector = (state: StateType) => state.usersPage.isFinished;\r\n","import React from \"react\";\r\nimport {ProfileType, StateType, UserElType} from \"../../store/stateType\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfile,\r\n    getProfileStatus,\r\n    savePhotoProfile,\r\n    setUserProfile, updateProfileInfoTC,\r\n    updateProfileStatusTC\r\n} from \"../../store/reducers/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {authUserHOC} from \"../-hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getAuthIdSelector, getProfileSelector, getProfileStatusSelector} from \"./profile-selector\";\r\nimport {getIsFinishedSelector, getUsersPageSelector} from \"../Users/user-selector\";\r\nimport {getFollow, getUnFollow} from \"../../store/reducers/usersReducer\";\r\n\r\ntype ProfilePropsType = RouteComponentProps<{ userId: string }> & {\r\n    profile: ProfileType | null\r\n    getProfile: (userId: string) => void\r\n    getProfileStatus: (userId: string) => void\r\n    updateProfileStatus: (status: Object | null) => void\r\n    updateProfileInfo: (info: ProfileType | null) => void\r\n    isAuth: boolean\r\n    profileStatus: string\r\n    authId: string\r\n    setUserProfile: (profile: ProfileType | null) => void\r\n    savePhotoProfile: (photo: File) => void\r\n\r\n    usersPage: UserElType[]\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType, ProfileType> {\r\n\r\n    refreshUser() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authId\r\n            if (!userId) this.props.history.push(\"/ReactGotlibbbWay/login\")\r\n\r\n\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshUser()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<ProfileType>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.props.setUserProfile(null)\r\n            this.refreshUser()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setUserProfile(null)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Profile {...this.props} currentUserId={Number(this.props.match.params.userId)}/>;\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => ({\r\n\r\n    profile: getProfileSelector(state),\r\n    profileStatus: getProfileStatusSelector(state),\r\n    authId: getAuthIdSelector(state),\r\n\r\n    usersPage: getUsersPageSelector(state),\r\n    isFinished: getIsFinishedSelector(state),\r\n})\r\n\r\nexport default compose<Function>(connect(mapStateToProps, {\r\n        savePhotoProfile,\r\n        setUserProfile,\r\n        getProfile,\r\n        getProfileStatus,\r\n        updateProfileStatus: updateProfileStatusTC,\r\n        updateProfileInfo: updateProfileInfoTC,\r\n        getUnFollow,\r\n        getFollow,\r\n    }),\r\n    React.memo, authUserHOC, withRouter)(ProfileContainer)\r\n\r\n","import {AuthType} from \"../../store/stateType\";\r\n\r\nexport const getAuthSelector = (state: AuthType) => state.data.isAuth;\r\n\r\nexport const getLoginSelector = (state: AuthType) => state.data.login;\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../-assets/FormControls/FormControl\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../store/reducers/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"../-assets/FormControls/formControl.module.css\"\r\nimport {StateType} from \"../../store/stateType\";\r\nimport {getAuthSelector} from \"../Header/header-selector\";\r\nimport { compose } from \"redux\";\r\n\r\nconst LogForm = reduxForm({form: 'login'})\r\n((props: InjectedFormProps) => {\r\n\r\n    return <form onSubmit={props.handleSubmit} className={style.loginBlock}>\r\n            <h1>Welcome</h1>\r\n        <p>For test purpose login: free@samuraijs.com\r\nand password: free</p>\r\n        <div >\r\n            <Field component={Input} placeholder={\"Email\"} name={\"email\"}/>\r\n        </div>\r\n\r\n        <div>\r\n            <Field component={Input}  placeholder={\"Password\"} name={\"password\"}\r\n                   type={\"password\"}/>\r\n        </div>\r\n\r\n        {/*<div style={{display: \"flex\", justifyContent: \"center\"}}>*/}\r\n        {/*    <Field  style={{fontSize: \"25px\"}} components={Input} type={\"checkbox\"} name={\"remember me\"}/>*/}\r\n        {/*    <span style={{fontSize: \"25px\"}}>Remember me</span>*/}\r\n        {/*</div>*/}\r\n\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n\r\n        {props.error &&\r\n        <div className={style.authError}>{props.error}</div>\r\n        }\r\n    </form>\r\n})\r\n\r\ntype LoginPropsType = {\r\n    login: Function\r\n    isAuth: boolean\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    if (props.isAuth) return <Redirect to={'/ReactGotlibbbWay/profile'}/>\r\n\r\n\r\n    const onSubmit = (formData: any) => {\r\n        console.log(formData)\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    return <div>\r\n\r\n        <LogForm onSubmit={onSubmit}/>\r\n\r\n    </div>\r\n}\r\n\r\nexport default compose<Function>(connect((state: StateType) => {return {isAuth: getAuthSelector(state)}}, {login}), React.memo)(Login)","import classes from \"./dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype PropsDialogsNameType = {\r\n    dialogsId: string\r\n    name: string\r\n}\r\n\r\nfunction DialogName(props: PropsDialogsNameType) {\r\n    return <div className={classes.name}><NavLink to={\"/Dialogs/\" + props.dialogsId}>{props.name}</NavLink></div>\r\n}\r\n\r\nexport default React.memo(DialogName)","import classes from \"./dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PropsDialogsMessageType = {\r\n    message: string\r\n    messageId: string\r\n}\r\n\r\nfunction DialogsMessage(props: PropsDialogsMessageType) {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\nexport default React.memo(DialogsMessage)","import React from \"react\";\r\nimport classes from \"./dialogs.module.css\";\r\nimport DialogName from \"./DialogName\";\r\nimport DialogsMessage from \"./DialogsMessages\";\r\nimport {DialogsDataElType, MessagesDataElType} from \"../../store/stateType\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../-assets/FormControls/FormControl\";\r\n\r\ntype DialogsPageTypeProps = {\r\n    dialogsData: Array<DialogsDataElType>\r\n    messagesData: Array<MessagesDataElType>\r\n    addMessages: (message: string) => void\r\n    newMessage: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport function Dialogs(props: DialogsPageTypeProps) {\r\n\r\n    let dialogsElement = props.dialogsData.map((d, index) => <DialogName dialogsId={d.dialogsId} name={d.name} key={index}/>)\r\n    let messagesElement = props.messagesData.map((m,index) => <DialogsMessage messageId={m.messageId}\r\n                                                                      message={m.message} key={index}/>)\r\n\r\n    const addMessages = (value: any) => {\r\n\r\n        props.addMessages(value.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={\"/Login\"}/>\r\n    }\r\n\r\n\r\n    return <div className={classes.Dialogs}>\r\n        <div className={classes.dialogsNames}>\r\n            {dialogsElement}\r\n        </div>\r\n\r\n        <div className={classes.Messages}>\r\n            {messagesElement}\r\n            <AddMessageForm onSubmit={addMessages}/>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nconst AddMessageForm = reduxForm({form: 'message form'})(\r\n    (props: InjectedFormProps) => {\r\n        return <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}  placeholder={\"enter your message\"}\r\n                       name={\"newMessageBody\"}/>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {StateType} from \"../../store/stateType\";\r\n\r\nexport const getMessagesDataSelector = (state: StateType) => state.dialogPage.messagesData;\r\n\r\nexport const getDialogsDataSelector = (state: StateType) => state.dialogPage.dialogsData;\r\n\r\nexport const getNewMessageSelector = (state: StateType) => state.dialogPage.newMessage;\r\n","import {createAddMessageAction} from \"../../store/reducers/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {DispatchActionType, StateType} from \"../../store/stateType\";\r\nimport {authUserHOC} from \"../-hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogsDataSelector, getMessagesDataSelector, getNewMessageSelector} from \"./dialogs-selector\";\r\n\r\n\r\nfunction mapStateProps(state: StateType) {\r\n\r\n    return {\r\n        messagesData: getMessagesDataSelector(state),\r\n        dialogsData: getDialogsDataSelector(state),\r\n        newMessage: getNewMessageSelector(state),\r\n    }\r\n\r\n}\r\n\r\nfunction mapDispatchProps(dispatch: (action: DispatchActionType) => void) {\r\n\r\n    return {\r\n\r\n        addMessages: (message: string) => {\r\n            dispatch(createAddMessageAction(message))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const DialogsContainer = compose<Function>(connect(mapStateProps, mapDispatchProps), authUserHOC)(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import styles from \"../../Users/users.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\ntype PaginationPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    currentPage: number\r\n}\r\n\r\nconst Pagination = (props: PaginationPropsType) => {\r\n    let [inputPage, setInputPage] = useState<string>(\" \")\r\n    let pageCount: number | undefined = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages: number[] = [];\r\n\r\n    for (let i = 0; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    if (pageCount >= 10) {\r\n\r\n        let errorInput: boolean = Number(inputPage) >= pages.length || Number(inputPage) <= 0\r\n        let errorButton: boolean =  props.currentPage+1>= pages.length|| props.currentPage <= 0\r\n        return <div className={styles.pageS}>\r\n\r\n\r\n            <div className={styles.pageSwitch}>\r\n                {props.currentPage !== 1 && <button onClick={() => {\r\n                    props.onPageChanged(pages[props.currentPage - 1])\r\n                    setInputPage(\" \")\r\n                }}>‚áê...prev page </button>}\r\n                <div > {props.currentPage} </div>\r\n                <button disabled={errorButton}\r\n                    onClick={() => {\r\n                    props.onPageChanged(pages[props.currentPage + 1])\r\n                    setInputPage(\" \")\r\n                }}> next page...‚áí</button>\r\n            </div>\r\n\r\n            <div className={styles.changePage}>\r\n                <span>Change page: </span>\r\n                <input type=\"number\" value={inputPage}\r\n                       onChange={(e) => setInputPage(e.currentTarget.value)}\r\n                       onKeyPress={(e) => {\r\n                           if (e.key === \"Enter\" && !errorInput) props.onPageChanged(Number(inputPage))\r\n                       }}\r\n                />\r\n\r\n                <button onClick={() => {\r\n                    props.onPageChanged(Number(inputPage))\r\n                }}\r\n                        disabled={errorInput}\r\n                >‚Ü™\r\n                </button>\r\n            </div>\r\n\r\n\r\n            <span className={styles.totalPage}>Total pages: {pages.length - 1}</span>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    return <div className={styles.pageS}>\r\n        {props.currentPage === 0 && pages.map(p => {\r\n            return <span onClick={() => {\r\n                props.onPageChanged(p)\r\n            }} className={props.currentPage === p ? styles.selectedPage : styles.page}>{p}</span>\r\n\r\n\r\n        })}\r\n    </div>\r\n\r\n}\r\n\r\nexport default React.memo(Pagination)","import React from \"react\";\r\nimport {UserElType} from \"../../store/stateType\";\r\nimport no_ava from '../-images/no_ava.png'\r\nimport styles from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FollowToggle from \"../-assets/FollowToggle\";\r\n\r\ntype UserPropsType = {\r\n\r\n    user: UserElType\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n}\r\n\r\n\r\n\r\nexport function User({user, ...props}: UserPropsType) {\r\n\r\n\r\n    return <div key={user.id} className={styles.user}>\r\n\r\n        <NavLink to={'/ReactGotlibbbWay/profile/' + user.id}>\r\n            <div>{user.name}</div>\r\n\r\n            <img src={user.photos.small || no_ava}\r\n                 alt={\"\"}/>\r\n        </NavLink>\r\n        <FollowToggle getUnFollow={props.getUnFollow} getFollow={props.getFollow} user={user} isFinished={props.isFinished}/>\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport {UserElType} from \"../../store/stateType\";\r\nimport styles from \"./users.module.css\";\r\nimport {Preloader} from \"../-assets/Preloader\";\r\nimport Pagination from \"../-assets/FormControls/Pagination\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    usersPage: UserElType[]\r\n    onPageChanged: (p: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n    isFetching: boolean\r\n\r\n\r\n}\r\n\r\nexport function Users(props: UsersPropsType) {\r\n\r\n    return <div className={styles.usersPage}>\r\n\r\n        {props.isFetching ? <Preloader/> :\r\n            <>\r\n                <Pagination totalUsersCount={props.totalUsersCount}\r\n                            currentPage={props.currentPage}\r\n                            onPageChanged={props.onPageChanged}\r\n                            pageSize={props.pageSize}\r\n                />\r\n                <div className={styles.usersBlock}>\r\n                    {props.usersPage.map(u => <User user={u}\r\n                                                    getUnFollow={props.getUnFollow}\r\n                                                    getFollow={props.getFollow}\r\n                                                    isFinished={props.isFinished}/>\r\n                    )}\r\n                </div>\r\n            </>\r\n        }\r\n\r\n\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {getFollow, getUnFollow, getUsers, setCurrentPage, } from \"../../store/reducers/usersReducer\";\r\nimport {StateType, UserElType} from \"../../store/stateType\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector,\r\n    getIsFetchingSelector,\r\n    getIsFinishedSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersPageSelector\r\n} from \"./user-selector\";\r\n\r\n\r\ntype UsersContainerPropsType = {\r\n    usersPage: UserElType[]\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number, page?: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFinished: number[]\r\n    getUnFollow: (userId: number) => void\r\n    getFollow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\nclass UsersAPIClassComponent extends React.PureComponent <UsersContainerPropsType, UserElType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page);\r\n        this.props.getUsers(page, this.props.pageSize);\r\n\r\n    }\r\n\r\n    // –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É —Ñ–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã\r\n\r\n\r\n    render() {\r\n        console.log(\"render\")\r\n\r\n        let pageCount: number | undefined = Math.ceil(this.props.totalUsersCount / this.props.pageSize);\r\n\r\n        let pages = [];\r\n\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n//–º–∞–ø–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∞–Ω –∏ —Å–ª–µ–¥–∏–º –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π currentPage —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º\r\n\r\n        return <>\r\n\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                {...this.props}\r\n            />\r\n\r\n        </>\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction mapStateProps(state: StateType) {\r\n\r\n    return {\r\n        usersPage: getUsersPageSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCount: getTotalUsersCountSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching: getIsFetchingSelector(state),\r\n        isFinished: getIsFinishedSelector(state),\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const UsersContainer = compose<Function>(connect(mapStateProps, {setCurrentPage,  getUnFollow, getFollow, getUsers}), React.memo)(UsersAPIClassComponent)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Route} from \"react-router-dom\";\r\nimport ProfileContainer from \"../Profile/ProfileContainer\";\r\nimport Login from \"../Login/Login\";\r\nimport {DialogsContainer} from \"../Dialogs/DialogsContainer\";\r\nimport {UsersContainer} from \"../Users/UsersContainer\";\r\n// import {News} from \"../News/News\";\r\n// import {Music} from \"../Music/Music\";\r\n// import {Settings} from \"../Settings/Settings\";\r\nimport React from \"react\";\r\n\r\nconst RoutesToContent = () => {\r\n    return <>\r\n        <Route path='/ReactGotlibbbWay/profile/:userId?'\r\n               us\r\n               render={() => <ProfileContainer/>}/>\r\n        <Route path='/ReactGotlibbbWay/login'\r\n               render={() => <Login/>}/>\r\n        <Route path='/ReactGotlibbbWay/dialogs'\r\n               render={() => <DialogsContainer/>}/>\r\n        <Route path='/ReactGotlibbbWay/users'\r\n               render={() => <UsersContainer/>}/>\r\n        {/*<Route path='/news'*/}\r\n        {/*       render={() => <News/>}/>*/}\r\n        {/*<Route path='/music'*/}\r\n        {/*       render={() => <Music/>}/>*/}\r\n        {/*<Route path='/settings'*/}\r\n        {/*       render={() => <Settings/>}/>*/}\r\n    </>\r\n}\r\n\r\nexport default React.memo(RoutesToContent)","import React from 'react';\r\nimport style from './app.module.css';\r\nimport {Navbar} from \"../Navbar/Navbar\";\r\nimport {connect} from 'react-redux';\r\nimport {initialize} from \"../../store/reducers/appReducer\";\r\nimport {Preloader} from \"../-assets/Preloader\";\r\nimport {StateType} from \"../../store/stateType\";\r\nimport {compose} from \"redux\";\r\nimport RoutesToContent from \"../-assets/RoutesToContent\";\r\n\r\ntype AppPropsType = {\r\n    initialize: () => void\r\n    initialized: boolean\r\n\r\n}\r\n\r\n\r\nclass App extends React.Component <AppPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.initialize()\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) return <Preloader/>\r\n\r\n        return <div className={style.appContainer}>\r\n\r\n\r\n            <div className={style.circle1}> </div>\r\n            <div className={style.circle2}> </div>\r\n            <div className={style.appBlock}>\r\n\r\n                {/*<div className={style.header}>*/}\r\n                {/*    <HeaderContainer/>*/}\r\n                {/*</div>*/}\r\n\r\n                    <div className={style.navbar}>\r\n                        <Navbar/>\r\n                    </div>\r\n                    <div className={style.content}>\r\n                        <RoutesToContent/>\r\n                    </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<Function>(connect((state: StateType) => {\r\n    return {initialized: state.app.initialized}\r\n}, {initialize}), React.memo)(App);\r\n","import 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./store/store\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./features/App/App\";\r\nimport React from \"react\";\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your App to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"dialogs_Dialogs__2ghCp\",\"dialogsNames\":\"dialogs_dialogsNames__QfNnY\",\"active\":\"dialogs_active__mIKUF\",\"Messages\":\"dialogs_Messages__1g32C\",\"communicationBlock\":\"dialogs_communicationBlock__1xBEO\",\"textarea\":\"dialogs_textarea__8Nb7A\",\"btnadd\":\"dialogs_btnadd__1HzsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"navbar_nav__bAire\",\"activeHover\":\"navbar_activeHover__3BgU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"app_appContainer__jAaEk\",\"circle1\":\"app_circle1__2-LhB\",\"circle2\":\"app_circle2__2LcO1\",\"appBlock\":\"app_appBlock__2QBn9\",\"content\":\"app_content__A9kKb\",\"navbar\":\"app_navbar__15VAa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"formControl_loginBlock__DuFCq\",\"formControl\":\"formControl_formControl__3IOTW\",\"error\":\"formControl_error__2ko6l\",\"authError\":\"formControl_authError__N-mvc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1m3bO\",\"title\":\"Posts_title__1Nuiw\",\"btnSend\":\"Posts_btnSend__PisfH\",\"textarea\":\"Posts_textarea__3yNTT\",\"textareaBlock\":\"Posts_textareaBlock__3YWpo\",\"postsBlock\":\"Posts_postsBlock__3l8Lw\"};","module.exports = __webpack_public_path__ + \"static/media/no_ava.6c9609f2.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"newPosts_userPhoto__2seCu\",\"newPost\":\"newPosts_newPost__3ziVk\",\"post\":\"newPosts_post___suLd\",\"postLike\":\"newPosts_postLike__3HXvr\"};"],"sourceRoot":""}